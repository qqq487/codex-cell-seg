sample {'image': tensor([[[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]],
        [[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]],
        [[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]],
        [[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]],
        [[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]],
        [[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]],
        [[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]],
        [[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]],
        [[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
INFO: Starting training:
        Epochs:          1000
        Batch size:      2
        Learning rate:   1e-06
        Training size:   4
        Validation size: 0
        Checkpoints:     True
        Device:          cuda
        Images scaling:  0.5
        Mixed Precision: True
Epoch 1/1000:   0%|                                                                                                                                                                  | 0/4 [00:00<?, ?img/s]/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)
Epoch 1/1000: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:01<00:00,  3.48img/s, loss (batch)=1.17]
INFO: Checkpoint 1 saved!
Epoch 2/1000:   0%|                                                                                                                                                                  | 0/4 [00:00<?, ?img/s][W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
sample {'image': tensor([[[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]],
        [[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]],
        [[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]],
        [[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]],
        [[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]],
        [[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]],
        [[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]],
        [[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]],
        [[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]],
        [[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]],
        [[0.0078, 0.0078, 0.0118,  ..., 0.1451, 0.1294, 0.0863],
         [0.0039, 0.0039, 0.0039,  ..., 0.1020, 0.0941, 0.0667],
         [0.0039, 0.0039, 0.0039,  ..., 0.0980, 0.0824, 0.0588],
         ...,
         [0.0314, 0.0392, 0.0471,  ..., 0.0353, 0.0314, 0.0275],
         [0.0392, 0.0588, 0.0902,  ..., 0.0431, 0.0471, 0.0510],
         [0.0353, 0.0588, 0.0863,  ..., 0.0510, 0.0706, 0.0706]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}sample {'image': tensor([[[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]],
        [[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]],
        [[0.5569, 0.6627, 0.6353,  ..., 0.0471, 0.0510, 0.0510],
         [0.6078, 0.7059, 0.6000,  ..., 0.0549, 0.0549, 0.0588],
         [0.4431, 0.4902, 0.4196,  ..., 0.0549, 0.0627, 0.0745],
         ...,
         [0.1765, 0.0353, 0.0235,  ..., 0.0824, 0.3059, 0.6353],
         [0.0549, 0.0157, 0.0471,  ..., 0.0549, 0.2392, 0.5059],
         [0.0078, 0.0039, 0.0118,  ..., 0.0549, 0.1569, 0.3020]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]],
        [[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]],
        [[0.0627, 0.0588, 0.0392,  ..., 0.0000, 0.0000, 0.0000],
         [0.0627, 0.0510, 0.0431,  ..., 0.0000, 0.0000, 0.0000],
         [0.0588, 0.0549, 0.0510,  ..., 0.0000, 0.0000, 0.0000],
         ...,
         [0.6980, 0.5216, 0.3216,  ..., 0.0000, 0.0000, 0.0000],
         [0.5569, 0.5569, 0.3686,  ..., 0.0000, 0.0000, 0.0000],
         [0.3882, 0.5255, 0.3569,  ..., 0.0039, 0.0000, 0.0000]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
sample {'image': tensor([[[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]],
        [[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]],
        [[0.0392, 0.0392, 0.0314,  ..., 0.0078, 0.0157, 0.0157],
         [0.0471, 0.0314, 0.0275,  ..., 0.0078, 0.0118, 0.0157],
         [0.0235, 0.0275, 0.0275,  ..., 0.0039, 0.0039, 0.0078],
         ...,
         [0.0000, 0.0000, 0.0000,  ..., 0.1137, 0.1216, 0.1843],
         [0.0000, 0.0000, 0.0000,  ..., 0.1098, 0.1373, 0.1765],
         [0.0000, 0.0000, 0.0000,  ..., 0.1529, 0.1922, 0.2000]]]), 'mask': tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]])}
Epoch 2/1000: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00,  4.78img/s, loss (batch)=1.11]
Epoch 3/1000:   0%|                                                                                                                                                                  | 0/4 [00:00<?, ?img/s][W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
Epoch 3/1000: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00,  4.73img/s, loss (batch)=1.06]
Epoch 4/1000:   0%|                                                                                                                                                                  | 0/4 [00:00<?, ?img/s][W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)
Epoch 4/1000:   0%|                                                                                                                                                                  | 0/4 [00:00<?, ?img/s]
Traceback (most recent call last):
  File "train.py", line 200, in <module>
    amp=args.amp)
  File "train.py", line 88, in train_net
    for batch in train_loader:
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 521, in __next__
    data = self._next_data()
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1186, in _next_data
    idx, data = self._get_data()
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1142, in _get_data
    success, data = self._try_get_data()
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 990, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/queue.py", line 179, in get
    self.not_empty.wait(remaining)
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/threading.py", line 300, in wait
    gotit = waiter.acquire(True, timeout)
KeyboardInterrupt
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "train.py", line 202, in <module>
    torch.save(net.state_dict(), 'INTERRUPTED.pth')
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/serialization.py", line 381, in save
    _legacy_save(obj, opened_file, pickle_module, pickle_protocol)
  File "/home/master/09/chacotw/miniconda3/envs/unet/lib/python3.7/site-packages/torch/serialization.py", line 214, in __exit__
    self.file_like.close()
