sample {'image': tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],
        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],
        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]]), 'mask': tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])}sample {'image': tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],
        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]],
        [[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]]), 'mask': tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])}
sample {'image': tensor([[[0.0000, 0.0039, 0.0157,  ..., 0.0118, 0.0078, 0.0078],
         [0.0000, 0.0078, 0.0235,  ..., 0.0196, 0.0118, 0.0078],
         [0.0078, 0.0157, 0.0314,  ..., 0.0627, 0.0235, 0.0118],
         ...,
         [0.0196, 0.0039, 0.0000,  ..., 0.0196, 0.0118, 0.0039],
         [0.0157, 0.0000, 0.0000,  ..., 0.0118, 0.0039, 0.0000],
         [0.0118, 0.0000, 0.0000,  ..., 0.0078, 0.0000, 0.0000]],
        [[0.0000, 0.0039, 0.0157,  ..., 0.0118, 0.0078, 0.0078],
         [0.0000, 0.0078, 0.0235,  ..., 0.0196, 0.0118, 0.0078],
         [0.0078, 0.0157, 0.0314,  ..., 0.0627, 0.0235, 0.0118],
         ...,
         [0.0196, 0.0039, 0.0000,  ..., 0.0196, 0.0118, 0.0039],
         [0.0157, 0.0000, 0.0000,  ..., 0.0118, 0.0039, 0.0000],
         [0.0118, 0.0000, 0.0000,  ..., 0.0078, 0.0000, 0.0000]],
        [[0.0000, 0.0039, 0.0157,  ..., 0.0118, 0.0078, 0.0078],
         [0.0000, 0.0078, 0.0235,  ..., 0.0196, 0.0118, 0.0078],
         [0.0078, 0.0157, 0.0314,  ..., 0.0627, 0.0235, 0.0118],
         ...,
         [0.0196, 0.0039, 0.0000,  ..., 0.0196, 0.0118, 0.0039],
         [0.0157, 0.0000, 0.0000,  ..., 0.0118, 0.0039, 0.0000],
         [0.0118, 0.0000, 0.0000,  ..., 0.0078, 0.0000, 0.0000]]]), 'mask': tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])}
sample {'image': tensor([[[0.0196, 0.0235, 0.0431,  ..., 0.0667, 0.0902, 0.1216],
         [0.0196, 0.0196, 0.0275,  ..., 0.0824, 0.1333, 0.1686],
         [0.0118, 0.0196, 0.0275,  ..., 0.1098, 0.1255, 0.1922],
         ...,
         [0.0510, 0.0196, 0.0078,  ..., 0.0118, 0.0118, 0.0078],
         [0.0431, 0.0235, 0.0078,  ..., 0.0118, 0.0118, 0.0078],
         [0.0431, 0.0235, 0.0118,  ..., 0.0157, 0.0118, 0.0118]],
        [[0.0196, 0.0235, 0.0431,  ..., 0.0667, 0.0902, 0.1216],
         [0.0196, 0.0196, 0.0275,  ..., 0.0824, 0.1333, 0.1686],
         [0.0118, 0.0196, 0.0275,  ..., 0.1098, 0.1255, 0.1922],
         ...,
         [0.0510, 0.0196, 0.0078,  ..., 0.0118, 0.0118, 0.0078],
         [0.0431, 0.0235, 0.0078,  ..., 0.0118, 0.0118, 0.0078],
         [0.0431, 0.0235, 0.0118,  ..., 0.0157, 0.0118, 0.0118]],
        [[0.0196, 0.0235, 0.0431,  ..., 0.0667, 0.0902, 0.1216],
         [0.0196, 0.0196, 0.0275,  ..., 0.0824, 0.1333, 0.1686],
         [0.0118, 0.0196, 0.0275,  ..., 0.1098, 0.1255, 0.1922],
         ...,
         [0.0510, 0.0196, 0.0078,  ..., 0.0118, 0.0118, 0.0078],
         [0.0431, 0.0235, 0.0078,  ..., 0.0118, 0.0118, 0.0078],
         [0.0431, 0.0235, 0.0118,  ..., 0.0157, 0.0118, 0.0118]]]), 'mask': tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])}
INFO: Starting training:
        Epochs:          1000
        Batch size:      2
        Learning rate:   1e-06
        Training size:   4
        Validation size: 0
        Checkpoints:     True
        Device:          cuda
        Images scaling:  0.5
        Mixed Precision: True
Epoch 1/1000:   0%|                                                                                                                                                                                         | 0/4 [00:00<?, ?img/s]/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torchvision/transforms/functional.py:92: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370116979/work/torch/csrc/utils/tensor_numpy.cpp:141.)
  img = torch.from_numpy(np.array(pic, np.float32, copy=False))
/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torchvision/transforms/functional.py:92: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370116979/work/torch/csrc/utils/tensor_numpy.cpp:141.)
  img = torch.from_numpy(np.array(pic, np.float32, copy=False))
Epoch 1/1000:   0%|                                                                                                                                                                                         | 0/4 [00:00<?, ?img/s]
Traceback (most recent call last):
  File "train.py", line 202, in <module>
    amp=args.amp)
  File "train.py", line 90, in train_net
    for batch in train_loader:
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 435, in __next__
    data = self._next_data()
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1085, in _next_data
    return self._process_data(data)
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 1111, in _process_data
    data.reraise()
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/_utils.py", line 428, in reraise
    raise self.exc_type(msg)
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/worker.py", line 198, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py", line 47, in fetch
    return self.collate_fn(data)
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/collate.py", line 73, in default_collate
    return {key: default_collate([d[key] for d in batch]) for key in elem}
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/collate.py", line 73, in <dictcomp>
    return {key: default_collate([d[key] for d in batch]) for key in elem}
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/collate.py", line 55, in default_collate
    return torch.stack(batch, 0, out=out)
