INFO: Starting training:
        Epochs:          1000
        Batch size:      2
        Learning rate:   1e-06
        Training size:   4
        Validation size: 0
        Checkpoints:     True
        Device:          cuda
        Images scaling:  1
        Mixed Precision: True
Epoch 1/1000:  50%|████████████████████████████████████████████▌                                            | 2/4 [00:01<00:01,  1.45img/s, loss (batch)=1.27]
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
Epoch 1/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:01<00:00,  2.47img/s, loss (batch)=1.15]
INFO: Checkpoint 1 saved!
Epoch 2/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 10.46img/s, loss (batch)=1.22]
Epoch 3/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 10.03img/s, loss (batch)=1.18]
Epoch 4/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 11.31img/s, loss (batch)=1.16]
Epoch 5/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 11.98img/s, loss (batch)=1.25]
Epoch 6/1000:  50%|████████████████████████████████████████████▌                                            | 2/4 [00:00<00:00, 12.13img/s, loss (batch)=1.24]
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
Epoch 6/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 11.95img/s, loss (batch)=1.29]
Epoch 7/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 12.28img/s, loss (batch)=1.08]
Epoch 8/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 11.39img/s, loss (batch)=1.15]
Epoch 9/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 12.12img/s, loss (batch)=1.19]
Epoch 10/1000: 100%|█████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 12.83img/s, loss (batch)=1.2]
Epoch 11/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 11.61img/s, loss (batch)=1.18]
Epoch 12/1000:  50%|████████████████████████████████████████████                                            | 2/4 [00:00<00:00, 12.79img/s, loss (batch)=1.19]
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
Epoch 12/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 11.36img/s, loss (batch)=1.19]
Epoch 13/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 10.44img/s, loss (batch)=1.17]
Epoch 14/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 10.29img/s, loss (batch)=1.31]
Epoch 15/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00,  9.13img/s, loss (batch)=1.29]
Epoch 16/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00,  9.49img/s, loss (batch)=1.15]
Epoch 17/1000:  50%|████████████████████████████████████████████                                            | 2/4 [00:00<00:00, 10.72img/s, loss (batch)=1.22]
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
stack_img size =  torch.Size([5, 150, 150])
Epoch 17/1000: 100%|████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 10.25img/s, loss (batch)=1.14]
Epoch 18/1000:   0%|                                                                                                                   | 0/4 [00:00<?, ?img/s]
Traceback (most recent call last):
  File "train.py", line 223, in <module>
    amp=args.amp)
  File "train.py", line 101, in train_net
    for batch in train_loader:
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 435, in __next__
    data = self._next_data()
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 475, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py", line 44, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py", line 44, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/utils/data/dataset.py", line 272, in __getitem__
    return self.dataset[self.indices[idx]]
  File "/tmp2/chacotw/unet/Pytorch-UNet/utils/data_loading.py", line 264, in __getitem__
    img = self.load(img_file)
  File "/tmp2/chacotw/unet/Pytorch-UNet/utils/data_loading.py", line 243, in load
    list_img_or_mask.append(Image.open(file).convert('L'))
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/PIL/Image.py", line 904, in convert
    self.load()
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/PIL/ImageFile.py", line 265, in load
    n, err_code = decoder.decode(b)
KeyboardInterrupt
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "train.py", line 225, in <module>
    torch.save(net.state_dict(), 'INTERRUPTED.pth')
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/serialization.py", line 374, in save
    _legacy_save(obj, opened_file, pickle_module, pickle_protocol)
  File "/home/master/09/chacotw/miniconda3/envs/detectron2/lib/python3.6/site-packages/torch/serialization.py", line 214, in __exit__
    self.file_like.close()
KeyboardInterrupt