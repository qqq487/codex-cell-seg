masks_pred[:,0] shape =  torch.Size([2, 300, 200])
############ input shape =  torch.Size([300, 2])
############ target shape =  torch.Size([300, 2])
INFO: Starting training:
        Epochs:          30000
        Batch size:      2
        Learning rate:   1e-06
        Training size:   3
        Validation size: 0
        Checkpoints:     True
        Device:          cuda
        Images scaling:  1
        Mixed Precision: True
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  8.14it/s]
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  1.30it/s]
Epoch 1/30000:   0%|                                                                                                                                                                 | 0/3 [00:01<?, ?img/s]
Traceback (most recent call last):
  File "train-multi.py", line 226, in <module>
    amp=args.amp)
  File "train-multi.py", line 110, in train_net
    lbl_loss_dice = dice_loss(masks_pred[:,0].permute(1, 2, 0),true_masks[:,1].permute(1, 2, 0), multiclass=True)
  File "/tmp2/chacotw/unet/Pytorch-UNet/utils/dice_score.py", line 44, in dice_loss
    return 1 - fn(input, target, reduce_batch_first=True)
  File "/tmp2/chacotw/unet/Pytorch-UNet/utils/dice_score.py", line 35, in multiclass_dice_coeff
    dice += dice_coeff(input[:, channel, ...], target[:, channel, ...], reduce_batch_first, epsilon)
  File "/tmp2/chacotw/unet/Pytorch-UNet/utils/dice_score.py", line 13, in dice_coeff
    raise ValueError(f'Dice: asked to reduce batch but got tensor without batch dimension (shape {input.shape})')
ValueError: Dice: asked to reduce batch but got tensor without batch dimension (shape torch.Size([300, 2]))